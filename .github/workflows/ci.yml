name: CI

on:
  push:
    tags:
      - v*
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build and test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [12.x]
        os: [ubuntu-latest, macOS-latest, windows-latest]

    steps:
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install esy
        run: npm i -g esy@0.6.4

      - name: Restore esy install cache
        uses: actions/cache@v1
        with:
          path: ~/.esy/source
          key: source-${{ hashFiles('**/index.json') }}

      - name: esy install
        run: esy install

      - name: Get esy cache folder
        id: print_esy_cache
        run: node .github/workflows/print_esy_cache.js

      - name: Restore esy build cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.print_esy_cache.outputs.esy_cache }}
          key: build-${{ matrix.os }}-${{ hashFiles('**/index.json') }}
          restore-keys: build-${{ matrix.os }}-

      - name: Build
        run: |
          esy build
          # Cleanup build cache in case dependencies have changed
          esy cleanup .

      - name: Test
        run: esy test

      - name: Get binary path
        id: print_binary_path
        shell: bash
        run: |
          # from https://stackoverflow.com/a/24848739/617787
          s=$(pwd); d=$(dirname $(esy x which Extract.exe));
          while [ "${d#$s/}" == "${d}" ]
          do s=$(dirname $s);b="../${b}"; done; 
          ESY__BINARY_PATH=${b}${d#$s/}/Extract.exe
          echo "ESY__BINARY_PATH: $ESY__BINARY_PATH"
          echo "##[set-output name=path;]$ESY__BINARY_PATH"

      - name: (only on release) Upload artifacts ${{ matrix.os }}
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}
          path: ${{ steps.print_binary_path.outputs.path }}
